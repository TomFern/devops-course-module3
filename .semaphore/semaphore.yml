version: v1.0
name: Continuous Integration Pipeline
agent:
  machine:
    type: s1-kubernetes
    os_image: ''
  containers:
    - name: main
      image: 'registry.semaphoreci.com/python:3.12.1'
fail_fast:
  stop:
    when: branch != 'main'
auto_cancel:
  running:
    when: branch != 'main'
  queued:
    when: branch = 'main'
global_job_config:
  prologue:
    commands:
      - checkout
blocks:
  - name: Audit dependencies
    task:
      jobs:
        - name: pip audit
          commands:
            - cd 1-dependency-scanning
            - pip install pip-audit
            - pip-audit -r requirements.txt || true
  - name: SAST Scan
    task:
      jobs:
        - name: Bandit
          commands:
            - cd 2-sast
            - pip install bandit
            - bandit -r vulnerable_script.py || true
  - name: DAST Scan
    task:
      jobs:
        - name: WIP
          commands:
            - cd 3-dast
            - pip install wapiti3
            - nohup python app.py &
            - 'wapiti -u http://localhost:5000 -f json'
            - cat localhost_5000*.json
            - artifact push job localhost_5000*.json
        - name: zap
          commands:
            - cd 3-dast
            - pip install -r requirements.txt
            - 'gunicorn -b 0:0:0:0:4000 app:app --daemon'
            - sudo apt update && apt install -y wget default-jre
            - 'wget https://github.com/zaproxy/zaproxy/releases/download/v2.16.0/ZAP_2_16_0_unix.sh'
            - bash ZAP_2_16_0_unix.sh -q
            - '/usr/local/bin/zap.sh -cmd -quickurl http://127.0.0.1:4000 -quickprogress -quickout /root/zap.html'
            - artifact push job /root/zap.html
            - '#/usr/local/bin/zap.sh -daemon -port 8090 -config api.disablekey=true -config scanner.threadPerHost=10'
            - '# 2. Wait for ZAP to initialize. Use zap-cli status with a timeout to ensure it''s ready.'
            - '#zap-cli status -t 120'
            - '# 3. Run a spider scan on the target URL to discover all links.'
            - '#zap-cli spider http://example.com'
            - '# 4. Start an active scan on the target URL to look for vulnerabilities.'
            - '#zap-cli active-scan http://example.com'
            - '# 5. (Optional) Wait for the active scan to complete. You can check the progress using:'
            - '#zap-cli status'
            - '# 6. Generate a security report in HTML format.'
            - '#zap-cli report -o zap_report.html -f html'
            - '# 7. Shut down the ZAP daemon once scanning and reporting are complete.'
            - '#zap-cli shutdown'
  - name: Code signing
    task:
      jobs:
        - name: Sign
          commands:
            - cd 4-signing
            - gpg --import /root//public.key
            - gpg --import /root/private.key
            - gpg --output artifact.txt.sig --detach-sign artifact.txt
            - gpg --verify artifact.txt.sig artifact.txt
            - artifact push project --force artifact.txt.sig
      secrets:
        - name: signature-keys
  - name: SBOM
    task:
      jobs:
        - name: Cyclonedx
          commands:
            - cd 5-sbom
            - pip install cyclonedx-bom
            - cyclonedx-py requirements -o bom.json
            - artifact push project --force bom.json
